* Introduction
This is the primary repo for the Coding Temple Module _Advanced JavaScript and Introduction to React._

* Project - Fake Store App

** Project Overview
 In this project, you will build a FakeStore E-Commerce App using React, React Router, and FakeStoreAPI. Your app will allow users to view, create, update, and delete products dynamically using API calls. This project reinforces state management, API interactions, React Router for navigation, and component-based architecture.

** Project Requirements
*** Home Page
  - Displays a welcome message and introduction to the store.
  - Contains a button to navigate to the Product Listing page.
  - Styled using React Bootstrap.


*** Product Listing Page
   - Fetches and displays a list of products from FakeStoreAPI (https://fakestoreapi.com/products).
   - Products should be displayed in a visually structured layout.

**** Each product should show:
   - Image
   - Title
   - Price
   - Button to view details (navigates to Product Details page).
   - Uses React Router for navigation.

*** Product Details Page
   - Displays detailed information for a single product.
   - Uses useParams() to extract the product ID from the URL.
   - Fetches the product data from FakeStoreAPI (https://fakestoreapi.com/products/:id).
     
**** Displays:
   - Product image, title, description, category, and price.
   - Button to add the product to a cart (cart functionality is optional).
   - Button to delete the product (removes it from the API).
   - Handles loading states and error messages.

*** Add Product Page
**** A form to create a new product using FakeStoreAPI (POST request).
   - The form should include fields for:
      - Product title
      - Price
      - Description
      - Category
   - Submitting the form should send data to FakeStoreAPI.
   - Displays a confirmation message when the product is "created."

*** Edit Product Page
   - Allows users to update an existing product (PUT request to FakeStoreAPI).
   - Pre-fills the form with the existing product data.
   - Submitting the form should update the product on the API.
   - Displays a success message after updating.
   - Delete Product Functionality
   - After deletion, the user should be redirected to the product listing page.

*** Navigation Bar
   - Should include links to:
      - Home (/)
      - Product Listing (/products)
      - Add Product (/add-product)
      - The navbar should work properly in mobile view.


*** Additional Features
   - Handle loading states (display loading indicators when fetching data).
   - Handle API errors (display user-friendly error messages).
   - Ensure mobile responsiveness using React Bootstrap.
